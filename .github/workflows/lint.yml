name: Lint and tests

on:
    pull_request:

jobs:
    lint-black:
        name: Lint by black
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v3
            -   name: Lint src by black
                uses: psf/black@stable
                with:
                    options: "--check"
                    src: "./src"
            -   name: Lint tests by black
                uses: psf/black@stable
                with:
                    options: "--check"
                    src: "./tests"

    lint-flake8:
        name: Lint by flake8
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v3
            -   name: Lint src by flake8
                uses: py-actions/flake8@v2
                with:
                    max-line-length: "110"
                    path: "src"
                    plugins: "flake8-comprehensions flake8-quotes pep8-naming flake8-bandit flake8-black"
            -   name: Lint tests by flake8
                uses: py-actions/flake8@v2
                with:
                    max-line-length: "110"
                    path: "tests"
                    plugins: "flake8-comprehensions flake8-quotes pep8-naming flake8-bandit flake8-black"

    tests-with-docker:
        name: Tests with docker
        runs-on: ubuntu-latest
        env:
            COMPOSE_PROJECT_NAME: movies_auth
            ENVIRONMENT: production
            DOCKER_BUILDKIT: 1
        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Create env file
                run: printf "${{ secrets.ENVS_PROD }}" >> .env

            -   name: Build docker-compose images
                run: |
                    docker-compose -f docker-compose.yml -f docker-compose.test.yml --profile default --profile tests build

            -   name: Run tests in docker
                run: docker-compose -f docker-compose.yml -f docker-compose.test.yml --profile default --profile tests run tests

#    tg-notify:
#        name: tg-notify
#        runs-on: ubuntu-latest
#        needs: [lint-black, lint-flake8, tests-with-docker]
#        steps:
#            -   name: send telegram message on push
#                uses: appleboy/telegram-action@master
#                with:
#                    to: ${{ secrets.TELEGRAM_TO }}
#                    token: ${{ secrets.TELEGRAM_TOKEN }}
#                    message: |
#                        ${{ github.actor }} created commit:
#                        Commit message: ${{ github.event.commits[0].message }}
#
#                        Repository: ${{ github.repository }}
#
#                        See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}

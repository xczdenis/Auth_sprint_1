"""Initial

Revision ID: 8d1b2ecedaf9
Revises:
Create Date: 2022-11-16 09:11:49.519143

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
from movies_auth.app.models import DeviceType


revision = "8d1b2ecedaf9"
down_revision = None
branch_labels = None
depends_on = None


def get_table_name_for_partition(partition_prefix: str, device_type: DeviceType) -> str:
    return f"{partition_prefix}_{device_type.value}"


def query_attach_partition(root_table: str, device_type: DeviceType) -> str:
    partition_name = get_table_name_for_partition(root_table, device_type)
    return f"""ALTER TABLE {root_table}
    ATTACH PARTITION {partition_name} FOR VALUES IN ('{device_type.name}')"""


def query_detach_partition(root_table: str, device_type: DeviceType) -> str:
    partition_name = get_table_name_for_partition(root_table, device_type)
    return f"""ALTER TABLE {root_table} DETACH PARTITION {partition_name}"""


def attach_partitions(root_table: str):
    for device_type in DeviceType:
        query = query_attach_partition(root_table, device_type)
        op.execute(query)


def detach_partitions(root_table: str):
    for device_type in DeviceType:
        query = query_detach_partition(root_table, device_type)
        op.execute(query)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "permissions",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("codename", sa.String(length=255), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_permissions")),
        sa.UniqueConstraint("codename", name=op.f("uq_permissions_codename")),
        sa.UniqueConstraint("name", name=op.f("uq_permissions_name")),
    )
    op.create_table(
        "users",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("login", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint("email", name=op.f("uq_users_email")),
    )
    op.create_table(
        "entry_records",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_entry_records_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", "device_type", name=op.f("pk_entry_records")),
        postgresql_partition_by="LIST (device_type)",
    )
    op.create_table(
        "entry_records_desktop",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_entry_records_desktop_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", "device_type", name=op.f("pk_entry_records_desktop")),
    )
    op.create_table(
        "entry_records_notebook",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_entry_records_notebook_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", "device_type", name=op.f("pk_entry_records_notebook")),
    )
    op.create_table(
        "entry_records_other",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_entry_records_other_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", "device_type", name=op.f("pk_entry_records_other")),
    )
    op.create_table(
        "entry_records_phone",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_entry_records_phone_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", "device_type", name=op.f("pk_entry_records_phone")),
    )
    op.create_table(
        "entry_records_tablet",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_entry_records_tablet_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", "device_type", name=op.f("pk_entry_records_tablet")),
    )
    op.create_table(
        "entry_records_tv",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_entry_records_tv_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", "device_type", name=op.f("pk_entry_records_tv")),
    )
    op.create_table(
        "social_accounts",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("provider", sa.String(), nullable=False),
        sa.Column("social_id", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("login", sa.String(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_social_accounts_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_social_accounts")),
    )
    op.create_table(
        "users_permissions",
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("permission_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
            name=op.f("fk_users_permissions_permission_id_permissions"),
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name=op.f("fk_users_permissions_user_id_users")),
    )

    attach_partitions("entry_records")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    detach_partitions("entry_records")

    op.drop_table("users_permissions")
    op.drop_table("social_accounts")
    op.drop_table("entry_records_tv")
    op.drop_table("entry_records_tablet")
    op.drop_table("entry_records_phone")
    op.drop_table("entry_records_other")
    op.drop_table("entry_records_notebook")
    op.drop_table("entry_records_desktop")
    op.drop_table("entry_records")
    op.drop_table("users")
    op.drop_table("permissions")

    op.execute("DROP TYPE devicetype;")
    # ### end Alembic commands ###

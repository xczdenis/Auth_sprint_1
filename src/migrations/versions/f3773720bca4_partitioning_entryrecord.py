"""Partitioning EntryRecord

Revision ID: f3773720bca4
Revises: f98cdd7fa1ad
Create Date: 2022-11-15 12:46:12.332014

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
from app.models import DeviceType

revision = "f3773720bca4"
down_revision = "f98cdd7fa1ad"
branch_labels = None
depends_on = None


def query_copy_table(table_from, table_to):
    return f"""INSERT INTO {table_to} (id, user_id, user_agent, created, device_type)
    SELECT id, user_id, user_agent, cast(created as timestamp) as created, '{DeviceType.OTHER.name}' as device_type
    FROM {table_from}"""


def get_table_name_for_partition(partition_prefix: str, device_type: DeviceType) -> str:
    return f"{partition_prefix}_{device_type.value}"


def query_attach_partition(root_table: str, device_type: DeviceType) -> str:
    return f"""ALTER TABLE {root_table}
    ATTACH PARTITION {get_table_name_for_partition(root_table, device_type)} FOR VALUES IN ('{device_type.name}')"""


def copy_table(table_from: str, table_to: str, query: str | None = None):
    query = query or query_copy_table(table_from, table_to)
    op.execute(query)


def attach_partitions(root_table: str):
    for device_type in DeviceType:
        query = query_attach_partition(root_table, device_type)
        op.execute(query)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    new_table = "login_history"
    old_table = "entry_records"

    op.create_table(
        "login_history",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "device_type"),
        sa.UniqueConstraint("id", "device_type"),
        postgresql_partition_by="LIST (device_type)",
    )
    op.create_table(
        "login_history_desktop",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "device_type"),
    )
    op.create_table(
        "login_history_notebook",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "device_type"),
    )
    op.create_table(
        "login_history_other",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "device_type"),
    )
    op.create_table(
        "login_history_phone",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "device_type"),
    )
    op.create_table(
        "login_history_tablet",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "device_type"),
    )
    op.create_table(
        "login_history_tv",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "device_type",
            sa.Enum("NOTEBOOK", "DESKTOP", "TABLET", "PHONE", "TV", "OTHER", name="devicetype"),
            nullable=False,
        ),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "device_type"),
    )

    attach_partitions(new_table)
    copy_table(old_table, new_table)

    op.drop_table("entry_records")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "entry_records",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_agent", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("user_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="entry_records_user_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="entry_records_pkey"),
        sa.UniqueConstraint("id", name="entry_records_id_key"),
    )
    op.drop_table("login_history_tv")
    op.drop_table("login_history_tablet")
    op.drop_table("login_history_phone")
    op.drop_table("login_history_other")
    op.drop_table("login_history_notebook")
    op.drop_table("login_history_desktop")
    op.drop_table("login_history")
    # ### end Alembic commands ###
